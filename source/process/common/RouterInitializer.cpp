/**
 * @file process/RouterInitializer.cpp
 * @date Created <2011-01-21 15:28:33>
 *
 * This file is generated by generators/router_initializer.rb from config file
 * generators/router_initializer.yml. Do not edit this file directly. Please read
 * the config file, update options there and re-run the ruby script to
 * update this file.
 */

#include "RouterInitializer.h"
#include <util/driver/ActionHandler.h>

#include <memory> // for std::auto_ptr

#include <controllers/DocumentsController.h>
#include <controllers/CommandsController.h>
#include <controllers/TestController.h>
#include <controllers/LogAnalysisController.h>
#include <controllers/AutoFillController.h>
#include <controllers/QueryCorrectionController.h>
#include <controllers/KeywordsController.h>
#include <controllers/StatusController.h>
#include <controllers/FacetedController.h>
#include <controllers/TopicController.h>


namespace sf1r
{
///////////////////////////////////////////////////////
// Only initialize collection irrelevant controllers
///////////////////////////////////////////////////////

void initializeDriverRouter(::izenelib::driver::Router& router, bool enableTest)
{

    {
        FacetedController faceted;
        const std::string controllerName("faceted");
        typedef ::izenelib::driver::ActionHandler<FacetedController> handler_type;
        typedef std::auto_ptr<handler_type> handler_ptr;

        handler_ptr clickHandler(
            new handler_type(
                faceted,
                &FacetedController::click
            )
        );

        router.map(
            controllerName,
            "click",
            clickHandler.get()
        );
        clickHandler.release();

        handler_ptr get_ontologyHandler(
            new handler_type(
                faceted,
                &FacetedController::get_ontology
            )
        );

        router.map(
            controllerName,
            "get_ontology",
            get_ontologyHandler.get()
        );
        get_ontologyHandler.release();

        handler_ptr get_repHandler(
            new handler_type(
                faceted,
                &FacetedController::get_rep
            )
        );

        router.map(
            controllerName,
            "get_rep",
            get_repHandler.get()
        );
        get_repHandler.release();

        handler_ptr get_static_repHandler(
            new handler_type(
                faceted,
                &FacetedController::get_static_rep
            )
        );

        router.map(
            controllerName,
            "get_static_rep",
            get_static_repHandler.get()
        );
        get_static_repHandler.release();

        handler_ptr manmadeHandler(
            new handler_type(
                faceted,
                &FacetedController::manmade
            )
        );

        router.map(
            controllerName,
            "manmade",
            manmadeHandler.get()
        );
        manmadeHandler.release();

        handler_ptr set_ontologyHandler(
            new handler_type(
                faceted,
                &FacetedController::set_ontology
            )
        );

        router.map(
            controllerName,
            "set_ontology",
            set_ontologyHandler.get()
        );
        set_ontologyHandler.release();

        handler_ptr static_clickHandler(
            new handler_type(
                faceted,
                &FacetedController::static_click
            )
        );

        router.map(
            controllerName,
            "static_click",
            static_clickHandler.get()
        );
        static_clickHandler.release();
    }

    {
        TopicController topic;
        const std::string controllerName("topic");
        typedef ::izenelib::driver::ActionHandler<TopicController> handler_type;
        typedef std::auto_ptr<handler_type> handler_ptr;

        handler_ptr get_similarHandler(
            new handler_type(
                topic,
                &TopicController::get_similar
            )
        );

        router.map(
            controllerName,
            "get_similar",
            get_similarHandler.get()
        );
        get_similarHandler.release();
    }


    {
        QueryCorrectionController query_correction;
        const std::string controllerName("query_correction");
        typedef ::izenelib::driver::ActionHandler<QueryCorrectionController> handler_type;
        typedef std::auto_ptr<handler_type> handler_ptr;

        handler_ptr indexHandler(
            new handler_type(
                query_correction,
                &QueryCorrectionController::index
            )
        );

        router.map(
            controllerName,
            "index",
            indexHandler.get()
        );
        indexHandler.release();
    }

    {
        AutoFillController auto_fill;
        const std::string controllerName("auto_fill");
        typedef ::izenelib::driver::ActionHandler<AutoFillController> handler_type;
        typedef std::auto_ptr<handler_type> handler_ptr;

        handler_ptr indexHandler(
            new handler_type(
                auto_fill,
                &AutoFillController::index
            )
        );

        router.map(
            controllerName,
            "index",
            indexHandler.get()
        );
        indexHandler.release();
    }

    {
        CommandsController commands;
        const std::string controllerName("commands");
        typedef ::izenelib::driver::ActionHandler<CommandsController> handler_type;
        typedef std::auto_ptr<handler_type> handler_ptr;

        handler_ptr indexHandler(
            new handler_type(
                commands,
                &CommandsController::index
            )
        );

        router.map(
            controllerName,
            "index",
            indexHandler.get()
        );
        indexHandler.release();

        handler_ptr index_recommendHandler(
            new handler_type(
                commands,
                &CommandsController::index_recommend
            )
        );

        router.map(
            controllerName,
            "index_recommend",
            index_recommendHandler.get()
        );
        index_recommendHandler.release();

        handler_ptr optimize_indexHandler(
            new handler_type(
                commands,
                &CommandsController::optimize_index
            )
        );

        router.map(
            controllerName,
            "optimize_index",
            optimize_indexHandler.get()
        );
        optimize_indexHandler.release();
    }

    if (enableTest)
    {
        TestController test;
        const std::string controllerName("test");
        typedef ::izenelib::driver::ActionHandler<TestController> handler_type;
        typedef std::auto_ptr<handler_type> handler_ptr;

        handler_ptr echoHandler(
            new handler_type(
                test,
                &TestController::echo
            )
        );

        router.map(
            controllerName,
            "echo",
            echoHandler.get()
        );
        echoHandler.release();

        handler_ptr sleepHandler(
            new handler_type(
                test,
                &TestController::sleep
            )
        );

        router.map(
            controllerName,
            "sleep",
            sleepHandler.get()
        );
        sleepHandler.release();
    }

    {
        LogAnalysisController log_analysis;
        const std::string controllerName("log_analysis");
        typedef ::izenelib::driver::ActionHandler<LogAnalysisController> handler_type;
        typedef std::auto_ptr<handler_type> handler_ptr;

        handler_ptr inject_user_queriesHandler(
            new handler_type(
                log_analysis,
                &LogAnalysisController::inject_user_queries
            )
        );

        router.map(
            controllerName,
            "inject_user_queries",
            inject_user_queriesHandler.get()
        );
        inject_user_queriesHandler.release();

        handler_ptr system_eventsHandler(
            new handler_type(
                log_analysis,
                &LogAnalysisController::system_events
            )
        );

        router.map(
            controllerName,
            "system_events",
            system_eventsHandler.get()
        );
        system_eventsHandler.release();

        handler_ptr user_queriesHandler(
            new handler_type(
                log_analysis,
                &LogAnalysisController::user_queries
            )
        );

        router.map(
            controllerName,
            "user_queries",
            user_queriesHandler.get()
        );
        user_queriesHandler.release();
    }

    {
        DocumentsController documents;
        const std::string controllerName("documents");
        typedef ::izenelib::driver::ActionHandler<DocumentsController> handler_type;
        typedef std::auto_ptr<handler_type> handler_ptr;

        handler_ptr createHandler(
            new handler_type(
                documents,
                &DocumentsController::create
            )
        );

        router.map(
            controllerName,
            "create",
            createHandler.get()
        );
        createHandler.release();

        handler_ptr destroyHandler(
            new handler_type(
                documents,
                &DocumentsController::destroy
            )
        );

        router.map(
            controllerName,
            "destroy",
            destroyHandler.get()
        );
        destroyHandler.release();

        handler_ptr duplicate_withHandler(
            new handler_type(
                documents,
                &DocumentsController::duplicate_with
            )
        );

        router.map(
            controllerName,
            "duplicate_with",
            duplicate_withHandler.get()
        );
        duplicate_withHandler.release();

        handler_ptr getHandler(
            new handler_type(
                documents,
                &DocumentsController::get
            )
        );

        router.map(
            controllerName,
            "get",
            getHandler.get()
        );
        getHandler.release();

        handler_ptr indexHandler(
            new handler_type(
                documents,
                &DocumentsController::index
            )
        );

        router.map(
            controllerName,
            "index",
            indexHandler.get()
        );
        indexHandler.release();

        handler_ptr searchHandler(
            new handler_type(
                documents,
                &DocumentsController::search
            )
        );

        router.map(
            controllerName,
            "search",
            searchHandler.get()
        );
        searchHandler.release();

        handler_ptr similar_toHandler(
            new handler_type(
                documents,
                &DocumentsController::similar_to
            )
        );

        router.map(
            controllerName,
            "similar_to",
            similar_toHandler.get()
        );
        similar_toHandler.release();

        handler_ptr similar_to_imageHandler(
            new handler_type(
                documents,
                &DocumentsController::similar_to_image
            )
        );

        router.map(
            controllerName,
            "similar_to_image",
            similar_to_imageHandler.get()
        );
        similar_to_imageHandler.release();

        handler_ptr updateHandler(
            new handler_type(
                documents,
                &DocumentsController::update
            )
        );

        router.map(
            controllerName,
            "update",
            updateHandler.get()
        );
        updateHandler.release();
    }

    {
        StatusController status;
        const std::string controllerName("status");
        typedef ::izenelib::driver::ActionHandler<StatusController> handler_type;
        typedef std::auto_ptr<handler_type> handler_ptr;

        handler_ptr indexHandler(
            new handler_type(
                status,
                &StatusController::index
            )
        );

        router.map(
            controllerName,
            "index",
            indexHandler.get()
        );
        indexHandler.release();
    }

    {
        KeywordsController keywords;
        const std::string controllerName("keywords");
        typedef ::izenelib::driver::ActionHandler<KeywordsController> handler_type;
        typedef std::auto_ptr<handler_type> handler_ptr;

        handler_ptr indexHandler(
            new handler_type(
                keywords,
                &KeywordsController::index
            )
        );

        router.map(
            controllerName,
            "index",
            indexHandler.get()
        );
        indexHandler.release();
    }

}

} // namespace sf1r

